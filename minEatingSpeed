class Solution {
    // Method to find the maximum element in the piles
    public long max(long piles[]) {
        long ans = Long.MIN_VALUE;
        for (long pile : piles) {
            if (pile > ans) {
                ans = pile;
            }
        }
        return ans;
    }

    // Method to calculate the total hours needed with a given eating speed
    public long fun(long piles[], long mid) {
        long hrs = 0;
        for (long pile : piles) {
            // Use integer arithmetic to simulate ceiling effect
            hrs += (pile + mid - 1) / mid;
        }
        return hrs;
    }

    // Method to find the minimum eating speed
    public int minEatingSpeed(int[] piles, int h) {
        long[] longPiles = new long[piles.length];
        for (int i = 0; i < piles.length; i++) {
            longPiles[i] = piles[i];
        }
        
        long maxElement = max(longPiles);
        long low = 1;
        long high = maxElement;
        long minAns = high;
        
        while (low <= high) {
            long mid = (low + high) / 2;
            long totalhrs = fun(longPiles, mid);
            if (totalhrs <= h) {
                minAns = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return (int) minAns;
    }
}
